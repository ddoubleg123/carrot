=== COPY AND PASTE THESE COMMANDS INTO YOUR SSH SESSION ===

1. Create prompt_styles.py:
---------------------------
cat > prompt_styles.py << 'EOF'
from dataclasses import dataclass
from typing import Dict, List

NEGATIVE_BASE = (
    "blurry, lowres, bad anatomy, deformed, disfigured, extra limbs, bad hands, cross-eye, "
    "text, watermark, logo, jpeg artifacts, oversharpened, noisy, grainy, duplicate, malformed"
)

@dataclass
class StylePreset:
    name: str
    positive_tags: List[str]
    negative_tags: List[str]
    resolution: tuple
    steps: int
    cfg: float
    hires: bool
    hires_scale: float
    hires_denoise: float

STYLE_PRESETS: Dict[str, StylePreset] = {
    "photoreal_portrait": StylePreset(
        name="photoreal_portrait",
        positive_tags=[
            "ultra-detailed, photorealistic, 35mm, shallow depth of field, skin pores, natural light",
            "sharp focus, catchlight eyes, well-defined iris, symmetrical face, cinematic lighting"
        ],
        negative_tags=[NEGATIVE_BASE, "overprocessed skin, plastic skin, uncanny valley"],
        resolution=(1024, 1024),
        steps=35,
        cfg=7.0,
        hires=True,
        hires_scale=2.0,
        hires_denoise=0.35
    ),
    "cinematic": StylePreset(
        name="cinematic",
        positive_tags=[
            "cinematic still, volumetric light, film grain subtle, arri alexa, moody shadows, rim light",
            "masterpiece, best quality, sharp details"
        ],
        negative_tags=[NEGATIVE_BASE],
        resolution=(1024, 1024),
        steps=35,
        cfg=7.0,
        hires=True,
        hires_scale=1.5,
        hires_denoise=0.35
    ),
    "editorial": StylePreset(
        name="editorial",
        positive_tags=[
            "fashion editorial, studio lighting, softbox, crisp edges, glossy magazine look, rich color",
            "sharp eyes, perfect makeup, detailed hair strands, high contrast"
        ],
        negative_tags=[NEGATIVE_BASE, "overexposed highlights, blown highlights"],
        resolution=(1024, 1280),
        steps=36,
        cfg=7.2,
        hires=True,
        hires_scale=1.7,
        hires_denoise=0.38
    ),
    "street": StylePreset(
        name="street",
        positive_tags=[
            "documentary, candid, natural light, realistic color, fine texture, subtle grain"
        ],
        negative_tags=[NEGATIVE_BASE],
        resolution=(1024, 1024),
        steps=32,
        cfg=6.8,
        hires=True,
        hires_scale=1.5,
        hires_denoise=0.32
    ),
    "neon": StylePreset(
        name="neon",
        positive_tags=[
            "neon lights, reflective surfaces, rain-soaked streets, bokeh, high contrast, glows"
        ],
        negative_tags=[NEGATIVE_BASE],
        resolution=(1024, 1024),
        steps=35,
        cfg=7.5,
        hires=True,
        hires_scale=1.8,
        hires_denoise=0.36
    ),
    "watercolor": StylePreset(
        name="watercolor",
        positive_tags=[
            "watercolor painting, soft edges, paper texture, delicate wash, hand-painted look"
        ],
        negative_tags=[NEGATIVE_BASE, "photoreal"],
        resolution=(1024, 1024),
        steps=28,
        cfg=7.0,
        hires=False,
        hires_scale=1.0,
        hires_denoise=0.0
    ),
    "art_deco_poster": StylePreset(
        name="art_deco_poster",
        positive_tags=[
            "art deco, bold geometry, limited palette, high contrast, poster design, clean lines"
        ],
        negative_tags=[NEGATIVE_BASE, "photoreal"],
        resolution=(1024, 1536),
        steps=30,
        cfg=7.2,
        hires=True,
        hires_scale=1.5,
        hires_denoise=0.30
    ),
    "anime": StylePreset(
        name="anime",
        positive_tags=[
            "anime style, crisp lineart, cel shading, vibrant colors, studio quality"
        ],
        negative_tags=[NEGATIVE_BASE, "realistic skin pores"],
        resolution=(1024, 1024),
        steps=28,
        cfg=7.0,
        hires=True,
        hires_scale=1.6,
        hires_denoise=0.33
    ),
}
EOF


2. Create prompt_builder.py:
----------------------------
cat > prompt_builder.py << 'EOF'
from typing import Tuple
from prompt_styles import STYLE_PRESETS

FACE_KEYWORDS = ["portrait", "face", "selfie", "headshot", "person", "model", "bust", "upper body"]

def should_enhance(prompt: str) -> bool:
    p = prompt.lower()
    return any(k in p for k in FACE_KEYWORDS)

def build_prompts(user_prompt: str, style_key: str) -> Tuple[str, str]:
    style = STYLE_PRESETS.get(style_key, STYLE_PRESETS["photoreal_portrait"])
    positive = f"{user_prompt}, {', '.join(style.positive_tags)}"
    negative = ", ".join(style.negative_tags)
    return positive, negative

def style_params(style_key: str):
    style = STYLE_PRESETS.get(style_key, STYLE_PRESETS["photoreal_portrait"])
    return dict(
        width=style.resolution[0],
        height=style.resolution[1],
        steps=style.steps,
        cfg=style.cfg,
        hires=style.hires,
        hires_scale=style.hires_scale,
        hires_denoise=style.hires_denoise,
    )
EOF


3. Create firebase_utils.py:
----------------------------
cat > firebase_utils.py << 'EOF'
import os
from datetime import datetime
import firebase_admin
from firebase_admin import credentials, storage

_initialized = False

def init_firebase():
    global _initialized
    if _initialized:
        return
    cred_path = os.environ.get("FIREBASE_CREDENTIALS", "")
    bucket_name = os.environ.get("FIREBASE_BUCKET", "")
    
    if not cred_path or not bucket_name:
        print("Warning: Firebase credentials not configured")
        return
    
    cred = credentials.Certificate(cred_path)
    firebase_admin.initialize_app(cred, {"storageBucket": bucket_name})
    _initialized = True

def save_png_bytes_and_get_url(png_bytes: bytes, filename_prefix: str = "sdxl"):
    try:
        init_firebase()
        if not _initialized:
            return None
        
        bucket = storage.bucket()
        ts = datetime.utcnow().strftime("%Y%m%d_%H%M%S_%f")
        blob = bucket.blob(f"images/{filename_prefix}_{ts}.png")
        blob.upload_from_string(png_bytes, content_type="image/png")
        blob.make_public()
        return blob.public_url
    except Exception as e:
        print(f"Error saving to Firebase: {e}")
        return None
EOF


4. Create enhancer_api.py:
--------------------------
cat > enhancer_api.py << 'EOF'
import base64, io, os
from typing import Optional
from fastapi import FastAPI
from pydantic import BaseModel
from PIL import Image
import numpy as np
import torch

REALESRGAN_AVAILABLE = False
CODEFORMER_AVAILABLE = False
print("Note: Enhancement features disabled due to dependency issues")

app = FastAPI(title="Enhancer API")

_g_esr_cache = {}
_g_codeformer = None

def load_codeformer():
    if not CODEFORMER_AVAILABLE:
        raise ImportError("CodeFormer not available")
    global _g_codeformer
    if _g_codeformer is None:
        pass
    return _g_codeformer

def get_esrgan(scale: int):
    if not REALESRGAN_AVAILABLE:
        raise ImportError("RealESRGAN not available")
    global _g_esr_cache
    if scale not in _g_esr_cache:
        pass
    return _g_esr_cache[scale]

class EnhanceReq(BaseModel):
    image_base64: str
    face_restore: bool = True
    codeformer_weight: float = 0.6
    upscale: int = 0

def b64_to_image(b64: str) -> Image.Image:
    raw = base64.b64decode(b64)
    return Image.open(io.BytesIO(raw)).convert("RGB")

def image_to_b64(img: Image.Image, fmt="PNG") -> str:
    buf = io.BytesIO()
    img.save(buf, format=fmt)
    return base64.b64encode(buf.getvalue()).decode()

def restore_faces(image: Image.Image, weight: float = 0.6) -> Image.Image:
    if not CODEFORMER_AVAILABLE:
        print("CodeFormer not available, returning original image")
        return image
    return image

def upscale_image(image: Image.Image, scale: int) -> Image.Image:
    if not REALESRGAN_AVAILABLE:
        print("RealESRGAN not available, returning original image")
        return image
    return image

@app.post("/enhance")
def enhance(req: EnhanceReq):
    img = b64_to_image(req.image_base64)
    if req.face_restore:
        img = restore_faces(img, req.codeformer_weight)
    if req.upscale in (2, 4):
        img = upscale_image(img, req.upscale)
    return {"enhanced_base64": image_to_b64(img)}
EOF


5. After all files are created, verify:
---------------------------------------
ls -la

