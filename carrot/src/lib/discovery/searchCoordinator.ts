import { chatStream, type ChatMessage } from '@/lib/llm/providers/DeepSeekClient'

/**
 * Search strategy generated by DeepSeek
 */
export interface SearchStrategy {
  wikipediaQueries: string[]
  newsKeywords: string[]
  academicTerms: string[]
  technicalTerms: string[]
  timeRange: {
    news: string // e.g., "last 30 days"
    reference: string // e.g., "all-time"
  }
  primarySources: string[] // Prioritized list of sources to use
  searchDepth: 'shallow' | 'medium' | 'deep'
}

/**
 * DeepSeek Search Coordinator
 * Generates comprehensive search strategies across multiple knowledge sources
 */
export class SearchCoordinator {
  /**
   * Generate search strategy for a topic using DeepSeek
   */
  static async generateStrategy(
    topicName: string,
    description: string,
    tags: string[]
  ): Promise<SearchStrategy> {
    console.log('[SearchCoordinator] Generating search strategy for:', topicName)

    const prompt = `You are a research coordinator specializing in comprehensive knowledge discovery.

**Topic:** "${topicName}"
**Description:** ${description || 'No description provided'}
**Tags:** ${tags.join(', ')}

**Your Task:**
Generate a comprehensive search strategy to discover the BEST authoritative content about this topic.

**Instructions:**
1. **wikipediaQueries**: List 5-10 Wikipedia page titles that would provide comprehensive coverage
   - Include the main topic
   - Include key people, events, concepts related to the topic
   - Include related historical contexts
   - Include subtopics that would have valuable citations

2. **newsKeywords**: List 3-5 keyword phrases for finding recent news articles
   - Focus on current events and recent developments
   - Include variations of the topic name

3. **academicTerms**: List 0-5 academic search terms (if topic is research-oriented)
   - Only include if the topic has academic/scientific aspects
   - Use proper academic terminology

4. **technicalTerms**: List 0-5 technical terms (if topic is technical/engineering)
   - Only include if the topic is technical in nature
   - Use Stack Overflow or GitHub-appropriate terms

5. **primarySources**: Prioritize which sources to use:
   - Options: "Wikipedia", "NewsAPI", "arXiv", "PubMed", "StackOverflow", "GitHub"
   - List in priority order (most important first)

6. **searchDepth**: Choose one:
   - "shallow": Quick overview (2-3 Wikipedia pages, 5 news articles)
   - "medium": Comprehensive (5-7 Wikipedia pages, 10 news articles, citations)
   - "deep": Exhaustive (10+ Wikipedia pages, 20+ news articles, all citations, academic papers)

**Return ONLY valid JSON** (no other text):

{
  "wikipediaQueries": ["query1", "query2", ...],
  "newsKeywords": ["keyword1", "keyword2", ...],
  "academicTerms": ["term1", "term2", ...],
  "technicalTerms": ["term1", "term2", ...],
  "timeRange": {
    "news": "last 30 days",
    "reference": "all-time"
  },
  "primarySources": ["Wikipedia", "NewsAPI", ...],
  "searchDepth": "medium"
}

**Example for "Chicago Bulls":**
{
  "wikipediaQueries": [
    "Chicago Bulls",
    "Michael Jordan",
    "1995-96 Chicago Bulls season",
    "Phil Jackson",
    "Triangle offense",
    "Scottie Pippen",
    "Chicago Bulls draft history"
  ],
  "newsKeywords": [
    "Chicago Bulls 2024",
    "Bulls roster",
    "Zach LaVine Bulls"
  ],
  "academicTerms": [],
  "technicalTerms": [],
  "timeRange": {
    "news": "last 30 days",
    "reference": "all-time"
  },
  "primarySources": ["Wikipedia", "NewsAPI"],
  "searchDepth": "medium"
}`

    const messages: ChatMessage[] = [
      {
        role: 'system',
        content: 'You are a research coordinator. Always return valid JSON only, no other text.'
      },
      {
        role: 'user',
        content: prompt
      }
    ]

    // Collect the streaming response
    let fullResponse = ''
    const stream = chatStream({
      model: 'deepseek-chat',
      messages,
      temperature: 0.3, // Low temperature for structured output
      max_tokens: 2000
    })

    for await (const chunk of stream) {
      if (chunk.type === 'token' && chunk.token) {
        fullResponse += chunk.token
      } else if (chunk.type === 'error') {
        throw new Error(chunk.error || 'DeepSeek API error')
      }
    }

    console.log('[SearchCoordinator] Raw response:', fullResponse.substring(0, 200))

    // Parse JSON response
    try {
      // Try to extract JSON from response
      const jsonMatch = fullResponse.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        const strategy = JSON.parse(jsonMatch[0]) as SearchStrategy
        
        // Validate and set defaults
        strategy.wikipediaQueries = strategy.wikipediaQueries || []
        strategy.newsKeywords = strategy.newsKeywords || []
        strategy.academicTerms = strategy.academicTerms || []
        strategy.technicalTerms = strategy.technicalTerms || []
        strategy.primarySources = strategy.primarySources || ['Wikipedia', 'NewsAPI']
        strategy.searchDepth = strategy.searchDepth || 'medium'
        
        console.log('[SearchCoordinator] âœ… Strategy generated:', {
          wikipediaCount: strategy.wikipediaQueries.length,
          newsCount: strategy.newsKeywords.length,
          sources: strategy.primarySources,
          depth: strategy.searchDepth
        })
        
        return strategy
      }
      
      throw new Error('No JSON found in response')
    } catch (parseError) {
      console.error('[SearchCoordinator] JSON parse error:', parseError)
      console.error('[SearchCoordinator] Response was:', fullResponse)
      
      // Fallback strategy
      return {
        wikipediaQueries: [topicName, ...tags.slice(0, 3)],
        newsKeywords: [topicName, `${topicName} news`],
        academicTerms: [],
        technicalTerms: [],
        timeRange: {
          news: 'last 30 days',
          reference: 'all-time'
        },
        primarySources: ['Wikipedia', 'NewsAPI'],
        searchDepth: 'medium'
      }
    }
  }
}
