generator client {
  provider = "prisma-client-js"
}

// ===== Append-only Training Models =====
model TrainingPlan {
  id         String   @id @default(cuid())
  agentId    String
  topics     String   // JSON stringified string[]
  options    String   // JSON stringified TrainingPlanOptions
  status     String
  totals     String   // JSON stringified totals
  topicPages String   // JSON stringified Record<string, number>
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  tasks      TrainingTask[]
  discoveries DiscoveryEntry[]
}

model TrainingTask {
  id           String   @id @default(cuid())
  planId       String
  agentId      String
  topic        String
  page         Int
  status       String
  itemsFed     Int      @default(0)
  itemsDropped Int      @default(0)
  attempts     Int      @default(0)
  lastError    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  plan         TrainingPlan @relation(fields: [planId], references: [id])
}

model DiscoveryEntry {
  id         String   @id @default(cuid())
  planId     String
  topic      String
  page       Int
  url        String?
  title      String?
  sourceType String?
  status     String
  ts         DateTime @default(now())
  plan       TrainingPlan @relation(fields: [planId], references: [id])
}

// Playback/user preferences synchronized across devices
model UserPref {
  userId         String  @id
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  captionsDefault Boolean @default(true)
  reducedMotion   Boolean @default(false)
  autoplay        Boolean @default(true)
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// Visual style used by audio poster visualizer
enum VisualStyle {
  liquid
  radial
  arc
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?          @map("email_verified")
  image             String?
  profilePhoto      String?
  profilePhotoPath  String?            @map("profile_photo_path")
  isOnboarded       Boolean            @default(false)
  username          String?            @unique
  firstName         String?
  lastName          String?
  phone             String?
  country           String?
  postalCode        String?
  /// Flexible, future-proof metadata
  metadata          Json?
  /// User interests (freeform, sanitized)
  interests         String?
  /// Terms of Service acceptance timestamp
  tosAcceptedAt     DateTime?          @map("tos_accepted_at")
  /// Privacy Policy acceptance timestamp  
  privacyAcceptedAt DateTime?          @map("privacy_accepted_at")
  /// Version of TOS accepted (for tracking policy changes)
  tosVersion        String?            @map("tos_version")
  /// Version of Privacy Policy accepted (for tracking policy changes)
  privacyVersion    String?            @map("privacy_version")
  onboardingAnswers OnboardingAnswer[]
  accounts          Account[]
  posts             Post[]
  sessions          Session[]
  userVideos        UserVideo[]
  /// Server-backed playback preferences (one-to-one)
  userPref          UserPref?
  // Media Library relations
  mediaAssets       MediaAsset[]
  mediaLabels       MediaLabel[]
  mediaCollections  MediaCollection[]
  // Comments relation
  comments          Comment[]
  // Engagement relations
  postLikes         PostLike[]
  postSaves         PostSave[]
  // Patch system relations
  createdPatches    Patch[] @relation("PatchCreator")
  addedSources      Source[] @relation("SourceAdder")
  patchPosts        PatchPost[] @relation("PatchPostAuthor")
  patchMemberships  PatchMember[] @relation("PatchMembers")
  // New patch system relations
  patchThemes       UserPatchTheme[]
  patchFollowers    Follower[]
  botSubscriptions  BotSubscription[]
}

model Post {
  id                  String   @id @default(cuid())
  content             String
  userId              String
  /// Stable seed for poster visualizer (palette, motion)
  visualSeed          String?
  /// Persisted style for poster visualizer. If null, UI will derive from seed.
  visualStyle         VisualStyle?
  gradientDirection   String?
  gradientFromColor   String?
  gradientViaColor    String?
  gradientToColor     String?
  imageUrls           String?
  gifUrl              String?
  audioUrl            String?
  audioTranscription  String?
  transcriptionStatus String?
  emoji               String?
  carrotText          String?
  stickText           String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  /// Edit metadata
  editedAt            DateTime?
  editCount           Int       @default(0)
  lastEditedBy        String?
  thumbnailUrl        String?
  videoUrl            String?
  /// Durable Firebase Storage location for path-mode playback (avoids signed URL expiry)
  videoBucket         String?   @db.VarChar(191)
  videoPath           String?
  /// Cloudflare Stream fields
  cfUid               String?  @map("cf_uid")
  cfStatus            String?  @map("cf_status")
  cfDurationSec       Float?   @map("cf_duration_sec")
  cfWidth             Int?     @map("cf_width")
  cfHeight            Int?     @map("cf_height")
  cfPlaybackUrlHls    String?  @map("cf_playback_url_hls")
  captionVttUrl       String?  @map("caption_vtt_url")
  User                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // Comments relation
  comments            Comment[]
  // Engagement
  likes               PostLike[]
  saves               PostSave[]

  @@map("posts")
  @@index([videoBucket, videoPath])
}

model OnboardingQuestion {
  id      String             @id @default(cuid())
  slug    String             @unique
  label   String
  type    String
  options Json?
  answers OnboardingAnswer[]
}

model OnboardingAnswer {
  id         String             @id @default(cuid())
  userId     String
  questionId String
  answer     Json
  user       User               @relation(fields: [userId], references: [id])
  question   OnboardingQuestion @relation(fields: [questionId], references: [id])

  @@unique([userId, questionId], name: "userId_questionId")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model IngestJob {
  id           String   @id
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  userId       String?  @map("user_id")
  postId       String?  @map("post_id")
  sourceUrl    String   @map("source_url")
  sourceType   String   @map("source_type")
  status       String
  progress     Int?
  error        String?
  mediaUrl     String?  @map("media_url")
  videoUrl     String?  @map("video_url")
  thumbnailUrl String?  @map("thumbnail_url")
  cfUid        String?  @map("cf_uid")
  cfStatus     String?  @map("cf_status")
  durationSec  Float?   @map("duration_sec")
  width        Int?
  height       Int?
  title        String?
  channel      String?

  @@map("ingest_jobs")
}

// Video deduplication system tables
model SourceAsset {
  id                  String    @id @default(cuid())
  platform            String // 'youtube', 'x', 'reddit', 'other'
  sourceUrlRaw        String    @map("source_url_raw")
  sourceUrlNormalized String    @unique @map("source_url_normalized")
  externalId          String?   @map("external_id")
  storageUri          String?   @map("storage_uri")
  contentHash         String?   @map("content_hash")
  durationSec         Int?      @map("duration_sec")
  width               Int?
  height              Int?
  fps                 Float?
  title               String?
  authorHandle        String?   @map("author_handle")
  publishedAt         DateTime? @map("published_at")
  status              String    @default("pending")
  version             Int       @default(1)
  refcount            Int       @default(0)
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  // Opposite relation fields
  userVideos          UserVideo[]
  videoVariants       VideoVariant[]
  ingestionJobs       IngestionJob[]

  @@unique([platform, externalId], name: "platform_external_id")
  @@index([contentHash])
  @@map("source_assets")
}

model UserVideo {
  id            String   @id @default(cuid())
  userId        String   @map("user_id")
  assetId       String   @map("asset_id")
  role          String   @default("original_ref") @map("role") // original_ref
  status        String   @default("draft") // draft | published | archived
  titleOverride String?  @map("title_override")
  notes         String?
  posterUri     String?  @map("poster_uri")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user     User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset    SourceAsset    @relation(fields: [assetId], references: [id], onDelete: Cascade)
  variants VideoVariant[]

  @@unique([userId, assetId], name: "user_asset")
  @@map("user_videos")
}

model VideoVariant {
  id                 String   @id @default(cuid())
  userVideoId        String   @map("user_video_id")
  derivedFromAssetId String   @map("derived_from_asset_id")
  variantKind        String   @default("edit") @map("variant_kind") // edit | captioned | clipped
  storageUri         String   @map("storage_uri")
  contentHash        String?  @map("content_hash")
  durationSec        Int?     @map("duration_sec")
  width              Int?
  height             Int?
  fps                Float?
  editManifest       Json     @map("edit_manifest") // timeline cuts, overlays, subtitles, filters
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  userVideo        UserVideo   @relation(fields: [userVideoId], references: [id], onDelete: Cascade)
  derivedFromAsset SourceAsset @relation(fields: [derivedFromAssetId], references: [id])

  @@index([derivedFromAssetId])
  @@map("video_variants")
}

model IngestionJob {
  id                  String   @id @default(cuid())
  userId              String   @map("user_id")
  sourceUrlRaw        String   @map("source_url_raw")
  sourceUrlNormalized String   @map("source_url_normalized")
  platform            String
  externalId          String?  @map("external_id")
  assetId             String?  @map("asset_id")
  idempotencyKey      String   @unique @map("idempotency_key") // sha256(normalized_url)
  state               String   @default("queued") // queued | running | succeeded | failed
  error               String?
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  asset SourceAsset? @relation(fields: [assetId], references: [id])

  @@map("ingestion_jobs")
}

/// MEDIA LIBRARY MODELS

model MediaAsset {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  type        String
  url         String
  storagePath String?  @map("storage_path")
  thumbUrl    String?  @map("thumb_url")
  thumbPath   String?  @map("thumb_path")
  title       String?
  hidden      Boolean  @default(false)
  source      String?
  durationSec Float?   @map("duration_sec")
  width       Int?
  height      Int?
  inUseCount  Int      @default(0) @map("in_use_count")
  cfUid       String?  @map("cf_uid")
  cfStatus    String?  @map("cf_status")
  captionVttUrl String? @map("caption_vtt_url")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user        User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  labels      MediaAssetLabel[]
  collections MediaAssetCollection[]

  @@unique([userId, url], name: "user_url_unique")
  @@index([userId])
  @@map("media_assets")
}

model MediaLabel {
  id     String @id @default(cuid())
  userId String @map("user_id")
  name   String

  user   User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets MediaAssetLabel[]

  @@unique([userId, name], name: "user_label_unique")
  @@index([userId])
  @@map("media_labels")
}

model MediaAssetLabel {
  id      String     @id @default(cuid())
  assetId String     @map("asset_id")
  labelId String     @map("label_id")
  asset   MediaAsset @relation(fields: [assetId], references: [id], onDelete: Cascade)
  label   MediaLabel @relation(fields: [labelId], references: [id], onDelete: Cascade)

  @@unique([assetId, labelId], name: "asset_label_unique")
  @@index([labelId])
  @@map("media_asset_labels")
}

model MediaCollection {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets MediaAssetCollection[]

  @@unique([userId, name], name: "user_collection_unique")
  @@index([userId])
  @@map("media_collections")
}

model MediaAssetCollection {
  id           String          @id @default(cuid())
  assetId      String          @map("asset_id")
  collectionId String          @map("collection_id")
  asset        MediaAsset      @relation(fields: [assetId], references: [id], onDelete: Cascade)
  collection   MediaCollection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@unique([assetId, collectionId], name: "asset_collection_unique")
  @@index([collectionId])
  @@map("media_asset_collections")
}

/// COMMENTS
model Comment {
  id        String   @id @default(cuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  text      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  post  Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
  @@map("comments")
}

/// POST ENGAGEMENT
model PostLike {
  id        String   @id @default(cuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId], name: "post_user_like_unique")
  @@index([postId])
  @@index([userId])
  @@map("post_likes")
}

model PostSave {
  id        String   @id @default(cuid())
  postId    String   @map("post_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([postId, userId], name: "post_user_save_unique")
  @@index([postId])
  @@index([userId])
  @@map("post_saves")
}

// Patch system models for Reddit/Wikipedia-style group pages
model Patch {
  id          String   @id @default(cuid())
  handle      String   @unique
  name        String
  tagline     String?  // Short one-liner for header
  description String
  rules       String?
  tags        String[]
  theme       String?  // 'light' | 'warm' | 'stone' - background variant
  createdBy   String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  creator User @relation("PatchCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  facts   Fact[]
  events  Event[]
  sources Source[]
  posts   PatchPost[]
  members PatchMember[]
  // New relations
  userThemes       UserPatchTheme[]
  followers        Follower[]
  botSubscriptions BotSubscription[]
  discoveredContent DiscoveredContent[]

  @@index([handle])
  @@index([createdBy])
  @@map("patches")
}

model Fact {
  id       String @id @default(cuid())
  patchId  String @map("patch_id")
  label    String
  value    String
  sourceId String? @map("source_id")

  patch  Patch  @relation(fields: [patchId], references: [id], onDelete: Cascade)
  source Source? @relation(fields: [sourceId], references: [id], onDelete: SetNull)

  @@index([patchId])
  @@map("facts")
}

model Event {
  id         String   @id @default(cuid())
  patchId    String   @map("patch_id")
  title      String
  dateStart  DateTime @map("date_start")
  dateEnd    DateTime? @map("date_end")
  summary    String
  media      Json?    // { type: 'image' | 'video', url: string, alt?: string }
  tags       String[]
  sourceIds  String[] @map("source_ids")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  patch   Patch    @relation(fields: [patchId], references: [id], onDelete: Cascade)
  sources Source[] @relation("EventSources")

  @@index([patchId])
  @@index([dateStart])
  @@map("events")
}

model Source {
  id          String    @id @default(cuid())
  patchId     String    @map("patch_id")
  title       String
  url         String
  author      String?
  publisher   String?
  publishedAt DateTime? @map("published_at")
  addedBy     String    @map("added_by")
  citeMeta    Json?     @map("cite_meta") // { title, url, author?, publisher?, publishedAt? }
  createdAt   DateTime  @default(now()) @map("created_at")

  patch   Patch   @relation(fields: [patchId], references: [id], onDelete: Cascade)
  adder   User    @relation("SourceAdder", fields: [addedBy], references: [id], onDelete: Cascade)
  facts   Fact[]
  events  Event[] @relation("EventSources")

  @@index([patchId])
  @@index([addedBy])
  @@map("sources")
}

model PatchPost {
  id        String   @id @default(cuid())
  patchId   String   @map("patch_id")
  authorId  String   @map("author_id")
  type      PostType
  title     String?
  body      String?
  media     Json?    // { type: 'image' | 'video', url: string, alt?: string }
  url       String?
  tags      String[]
  metrics   Json     // { likes: number, comments: number, reposts: number, views: number }
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  patch  Patch @relation(fields: [patchId], references: [id], onDelete: Cascade)
  author User  @relation("PatchPostAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([patchId])
  @@index([authorId])
  @@index([createdAt])
  @@map("patch_posts")
}

model PatchMember {
  id        String   @id @default(cuid())
  patchId   String   @map("patch_id")
  userId    String   @map("user_id")
  role      String   @default("member") // member, moderator, admin
  joinedAt  DateTime @default(now()) @map("joined_at")

  patch Patch @relation(fields: [patchId], references: [id], onDelete: Cascade)
  user  User  @relation("PatchMembers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([patchId, userId], name: "patch_user_member_unique")
  @@index([patchId])
  @@index([userId])
  @@map("patch_members")
}

enum PostType {
  CARROT
  TEXT
  LINK
  IMAGE
  VIDEO
}

// AI Agent System Models
model Agent {
  id                String   @id @default(cuid())
  name              String
  persona           String   // Detailed personality and expertise description
  domainExpertise   String[] // Taxonomy tags for expertise areas
  associatedPatches String[] // Group pages or topic areas this agent covers
  vectorDbRef       String?  // Reference to vector DB collection
  knowledgeProfile  Json?    // Current belief map or knowledge profile
  feedSubscriptions Json?    // RSS feeds, webhooks, etc.
  metadata          Json     @default("{}") // Council membership, visibility, training enabled, etc.
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  memories     AgentMemory[]
  feedEvents   AgentFeedEvent[]
  conversations AgentConversation[]

  @@map("agents")
}

model AgentMemory {
  id          String   @id @default(cuid())
  agentId     String   @map("agent_id")
  content     String   // The actual memory content
  embedding   Float[]  // Vector embedding of the content
  sourceType  String   // "url", "file", "post", "manual", etc.
  sourceUrl   String?  // Original source URL
  sourceTitle String?  // Title of the source
  sourceAuthor String? // Author of the source
  tags        String[] // Topic tags, sentiment, bias labels, etc.
  confidence  Float    @default(1.0) // Confidence score for this memory
  threadId    String?  // Associated Carrot group page thread ID
  topicId     String?  // Associated topic ID
  fedBy       String?  // User ID who fed this memory
  createdAt   DateTime @default(now())

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_memories")
}

model AgentFeedEvent {
  id          String   @id @default(cuid())
  agentId     String   @map("agent_id")
  eventType   String   // "feed", "forget", "reweight", etc.
  content     String   // Description of what was fed
  sourceUrl   String?  // Source URL if applicable
  sourceTitle String?  // Source title if applicable
  memoryIds   String[] // IDs of memories created/affected
  fedBy       String?  // User ID who performed the action
  metadata    Json     @default("{}") // Additional event metadata
  createdAt   DateTime @default(now())

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_feed_events")
}

model AgentConversation {
  id          String   @id @default(cuid())
  agentId     String   @map("agent_id")
  threadId    String?  // Carrot thread ID if connected
  query       String   // The user's query
  response    String   // Agent's response
  context     Json?    // Additional context for the conversation
  memoryIds   String[] // Memory IDs that influenced this response
  createdAt   DateTime @default(now())

  agent Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)

  @@map("agent_conversations")
}

// New Patch System Models
model UserPatchTheme {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  patchId   String   @map("patch_id")
  mode      String   // 'preset' | 'image'
  preset    String?  // 'light' | 'warm' | 'stone' | 'civic' | 'ink'
  imageUrl  String?  @map("image_url")
  updatedAt DateTime @updatedAt @map("updated_at")

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  patch Patch @relation(fields: [patchId], references: [id], onDelete: Cascade)

  @@unique([userId, patchId], name: "user_patch_theme_unique")
  @@index([userId])
  @@index([patchId])
  @@map("user_patch_themes")
}

model Follower {
  id        String   @id @default(cuid())
  patchId   String   @map("patch_id")
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")

  patch Patch @relation(fields: [patchId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([patchId, userId], name: "patch_user_follower_unique")
  @@index([patchId])
  @@index([userId])
  @@map("followers")
}

model BotSubscription {
  id          String   @id @default(cuid())
  patchId     String   @map("patch_id")
  botId       String   @map("bot_id")
  ownerUserId String   @map("owner_user_id")
  createdAt   DateTime @default(now()) @map("created_at")

  patch Patch @relation(fields: [patchId], references: [id], onDelete: Cascade)
  owner User  @relation(fields: [ownerUserId], references: [id], onDelete: Cascade)

  @@unique([patchId, botId], name: "patch_bot_subscription_unique")
  @@index([patchId])
  @@index([ownerUserId])
  @@map("bot_subscriptions")
}

// AI-Discovered Content for Patches
model DiscoveredContent {
  id              String   @id @default(cuid())
  patchId         String   @map("patch_id")
  type            String   // 'document' | 'source' | 'discussion_topic' | 'timeline_event'
  title           String
  content         String
  relevanceScore  Int      @map("relevance_score") // 1-10
  sourceUrl       String?  @map("source_url")
  tags            String[]
  status          String   @default("pending") // 'pending' | 'approved' | 'rejected' | 'audited'
  auditScore      Int?     @map("audit_score") // 1-10, set after DeepSeek audit
  auditNotes      String?  @map("audit_notes")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  patch Patch @relation(fields: [patchId], references: [id], onDelete: Cascade)

  @@index([patchId])
  @@index([type])
  @@index([status])
  @@index([relevanceScore])
  @@map("discovered_content")
}
