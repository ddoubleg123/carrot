generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?          @map("email_verified")
  image             String?
  profilePhoto      String?
  isOnboarded       Boolean            @default(false)
  username          String?            @unique
  firstName         String?
  lastName          String?
  phone             String?
  country           String?
  postalCode        String?
  /// Flexible, future-proof metadata
  metadata          Json?
  /// User interests (freeform, sanitized)
  interests         String?
  /// Terms of Service acceptance timestamp
  tosAcceptedAt     DateTime?          @map("tos_accepted_at")
  /// Privacy Policy acceptance timestamp  
  privacyAcceptedAt DateTime?          @map("privacy_accepted_at")
  /// Version of TOS accepted (for tracking policy changes)
  tosVersion        String?            @map("tos_version")
  /// Version of Privacy Policy accepted (for tracking policy changes)
  privacyVersion    String?            @map("privacy_version")
  onboardingAnswers OnboardingAnswer[]
  accounts          Account[]
  posts             Post[]
  sessions          Session[]
  userVideos        UserVideo[]
}

model Post {
  id                  String   @id @default(cuid())
  content             String
  userId              String
  gradientDirection   String?
  gradientFromColor   String?
  gradientViaColor    String?
  gradientToColor     String?
  imageUrls           String?
  gifUrl              String?
  audioUrl            String?
  audioTranscription  String?
  transcriptionStatus String?
  emoji               String?
  carrotText          String?
  stickText           String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  thumbnailUrl        String?
  videoUrl            String?
  /// Cloudflare Stream fields
  cfUid               String?  @map("cf_uid")
  cfStatus            String?  @map("cf_status")
  cfDurationSec       Float?   @map("cf_duration_sec")
  cfWidth             Int?     @map("cf_width")
  cfHeight            Int?     @map("cf_height")
  cfPlaybackUrlHls    String?  @map("cf_playback_url_hls")
  captionVttUrl       String?  @map("caption_vtt_url")
  User                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model OnboardingQuestion {
  id      String             @id @default(cuid())
  slug    String             @unique
  label   String
  type    String
  options Json?
  answers OnboardingAnswer[]
}

model OnboardingAnswer {
  id         String             @id @default(cuid())
  userId     String
  questionId String
  answer     Json
  user       User               @relation(fields: [userId], references: [id])
  question   OnboardingQuestion @relation(fields: [questionId], references: [id])

  @@unique([userId, questionId], name: "userId_questionId")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model IngestJob {
  id           String   @id
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  userId       String?  @map("user_id")
  postId       String?  @map("post_id")
  sourceUrl    String   @map("source_url")
  sourceType   String   @map("source_type")
  status       String
  progress     Int?
  error        String?
  mediaUrl     String?  @map("media_url")
  videoUrl     String?  @map("video_url")
  thumbnailUrl String?  @map("thumbnail_url")
  cfUid        String?  @map("cf_uid")
  cfStatus     String?  @map("cf_status")
  durationSec  Float?   @map("duration_sec")
  width        Int?
  height       Int?
  title        String?
  channel      String?

  @@map("ingest_jobs")
}

// Video deduplication system tables
model SourceAsset {
  id                    String   @id @default(cuid())
  platform              String   // 'youtube', 'x', 'reddit', 'other'
  sourceUrlRaw          String   @map("source_url_raw")
  sourceUrlNormalized   String   @unique @map("source_url_normalized")
  externalId            String?  @map("external_id")
  storageUri            String?  @map("storage_uri")
  contentHash           String?  @map("content_hash")
  durationSec           Int?     @map("duration_sec")
  width                 Int?
  height                Int?
  fps                   Float?
  title                 String?
  authorHandle          String?  @map("author_handle")
  publishedAt           DateTime? @map("published_at")
  status                String   @default("pending") // pending | ready | failed | removed
  version               Int      @default(1)
  refcount              Int      @default(0)
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  userVideos            UserVideo[]
  videoVariants         VideoVariant[]
  ingestionJobs         IngestionJob[]

  @@unique([platform, externalId], name: "platform_external_id")
  @@index([contentHash])
  @@map("source_assets")
}

model UserVideo {
  id              String   @id @default(cuid())
  userId          String   @map("user_id")
  assetId         String   @map("asset_id")
  role            String   @default("original_ref") @map("role") // original_ref
  status          String   @default("draft") // draft | published | archived
  titleOverride   String?  @map("title_override")
  notes           String?
  posterUri       String?  @map("poster_uri")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  asset           SourceAsset  @relation(fields: [assetId], references: [id], onDelete: Cascade)
  variants        VideoVariant[]

  @@unique([userId, assetId], name: "user_asset")
  @@map("user_videos")
}

model VideoVariant {
  id                  String   @id @default(cuid())
  userVideoId         String   @map("user_video_id")
  derivedFromAssetId  String   @map("derived_from_asset_id")
  variantKind         String   @default("edit") @map("variant_kind") // edit | captioned | clipped
  storageUri          String   @map("storage_uri")
  contentHash         String?  @map("content_hash")
  durationSec         Int?     @map("duration_sec")
  width               Int?
  height              Int?
  fps                 Float?
  editManifest        Json     @map("edit_manifest") // timeline cuts, overlays, subtitles, filters
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  userVideo           UserVideo   @relation(fields: [userVideoId], references: [id], onDelete: Cascade)
  derivedFromAsset    SourceAsset @relation(fields: [derivedFromAssetId], references: [id])

  @@index([derivedFromAssetId])
  @@map("video_variants")
}

model IngestionJob {
  id                    String   @id @default(cuid())
  userId                String   @map("user_id")
  sourceUrlRaw          String   @map("source_url_raw")
  sourceUrlNormalized   String   @map("source_url_normalized")
  platform              String
  externalId            String?  @map("external_id")
  assetId               String?  @map("asset_id")
  idempotencyKey        String   @unique @map("idempotency_key") // sha256(normalized_url)
  state                 String   @default("queued") // queued | running | succeeded | failed
  error                 String?
  createdAt             DateTime @default(now()) @map("created_at")
  updatedAt             DateTime @updatedAt @map("updated_at")

  asset                 SourceAsset? @relation(fields: [assetId], references: [id])

  @@map("ingestion_jobs")
}

