// Clean Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  profilePhoto  String?
  isOnboarded   Boolean  @default(false)
  username      String?  @unique
  firstName     String?
  lastName      String?
  phone         String?
  country       String?
  postalCode    String?
  metadata      Json?
  onboardingAnswers OnboardingAnswer[]
  interests    String?
  posts        Post[]
}

model OnboardingQuestion {
  id       String   @id @default(cuid())
  slug     String   @unique
  label    String
  type     String
  options  Json?
  answers  OnboardingAnswer[]
}

model OnboardingAnswer {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   OnboardingQuestion @relation(fields: [questionId], references: [id])
  questionId String
  answer     Json

  @@unique([userId, questionId], name: "userId_questionId")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id])
  content String
  gradientDirection String
  gradientFromColor String
  gradientViaColor String?
  gradientToColor String
  imageUrls Json?
  gifUrl String?
  audioUrl String?
  emoji String?
  carrotText String?
  stickText String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
